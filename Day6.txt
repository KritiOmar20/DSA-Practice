Day 6

Ques1: Find Minimum in Rotated Sorted Array
Solution:--

int findMin(vector<int>& nums) {
        int ans = INT_MAX;
        for(int i=0; i< nums.size();i++){
            ans= min(ans, nums[i]);
        }
        return ans;
    }

using binary search:--
int findMin(vector<int>& nums) {
        int low=0, high = nums.size()-1;
        int ans=INT_MAX;
        while(low<=high){
            int mid = (low+high)/2; 
            if(nums[low]<=nums[mid]){
                ans = min(ans,nums[low]);
                low = mid+1;
            }
            else{
               high = mid-1;
               ans = min(ans,nums[mid]);
            }
        }
        return ans;
    }

Ques2: Search a 2D matrix
Solution:--

bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n= matrix.size();
        int m = matrix[0].size();
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(matrix[i][j] == target) return true;
            }
        }
        return false;
    }
 TC=> O(n*m)
 SC=> O(1)

Binary Search:--

bool searchInRow(vector<vector<int>>& matrix, int target, int row){
        int m= matrix[0].size();
        int start = 0 , end = m-1;
        while(start<= end){
            int mid= (start+end)/2;
            if(target == matrix[row][mid]){
                return true;
            }else if(target> matrix[row][mid]){
                start = mid+1;
            }else{
                end = mid-1;
            }
        }
        return false;
    }

    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n= matrix.size();
        int m = matrix[0].size();
        int start = 0, end = n-1;
        while(start <= end){
            int mid = (start + end)/2;
            if(target>= matrix[mid][0] && target <= matrix[mid][m-1]){
                //Found the row
                return searchInRow(matrix, target, mid);
            }
            else if(target >= matrix[mid][m-1]){
                //down => right
                start = mid+1;
            }else{
                end = mid-1;
            }
        }
        return false;
    }
TC=> O(log(m*n))

Ques 3: Search in a Rotated Sorted Array
Solution:

int search(vector<int>& nums, int target) {
        for(int i=0; i<nums.size();i++){
            if(nums[i] == target){
                return i;
            }
        }
        return -1;
    }
TC=> O(n)

Binary Search-->

int search(vector<int>& nums, int target) {
        int low =0, high =nums.size()-1;
        while(low<=high){
            int mid = (low + high)/2;
            if(nums[mid] == target) return mid;
            if (nums[low] <= nums[mid])
            {
                // If the target lies within the sorted left half, search in this half
                if (nums[low] <= target && target <= nums[mid]){
                    high = mid - 1;
                }else{
                    low = mid + 1;
                }
            }
            // If the left half is not sorted, then the right half [mid, high] must be sorted
            else{
                // If the target lies within the sorted right half, search in this half
                if (nums[mid] <= target && target <= nums[high]){
                    low = mid + 1; 
                }else{
                    high = mid - 1; 
                }
            }
        }
        return -1;
    }

TC => O(log n)

Ques 4: Find Minimum in Rotated Sorted Array II
Solution:--

int findMin(vector<int>& nums) {
        int low=0, high = nums.size()-1;
        while(low<=high){
            int mid = (low+high)/2;
            if(nums[mid] > nums[high]){ // minimum element must be on the right side of mid
                low = mid + 1;
            }
            else if(nums[mid] < nums[high]){ //minimum element is at mid or on the left side.
                high =mid;
            }
            else{ // handle duplicate
                high--;
            }
        }
        return nums[low];  
    }
